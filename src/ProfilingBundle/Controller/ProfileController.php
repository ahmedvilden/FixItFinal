<?php

namespace ProfilingBundle\Controller;

use ProfilingBundle\Entity\Album;
use ProfilingBundle\Entity\Post;
use ProfilingBundle\Form\PostType;
use ProfilingBundle\Repository\PostRepository;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\DateTime;
use UserBundle\Entity\User;
use Vich\UploaderBundle\Form\Type\VichImageType;

class ProfileController extends Controller
{
public function index_profileAction()
{
    $u = $this->container->get('security.token_storage')->getToken()->getUser();
    $em=$this->getDoctrine()->getManager();
    return $this->render('@Profiling/Profile.html.twig',array(
        'curr_user'=>$u
    ));
}
    public function albumAction(Request $request)
    {
        $u=$this->container->get('security.token_storage')->getToken()->getUser();
        $em = $this->getDoctrine()->getManager();
        $album = new Album();
        //----------------
        $form=$this->createFormBuilder($album)
            ->add('imageFile', VichImageType::class)
            ->add('user',HiddenType::class, array('data' => $u))
            ->add('Ajouter',SubmitType::class)
            ->getForm();
        $form->handleRequest($request);
        if (($form->isSubmitted())&&($form->isValid()))
        {
            $album=$form->getData();
            $album->setUser($u);
            $taw=new \DateTime('now');
            $album->setDatePublication($taw);
            $em->persist($album);
            $em->flush();
            return $this->redirectToRoute('album');
        }
        //-------------------supprimer photo
        /*if ($request->isMethod('POST')) {
            if ($request->request->has('idp')) {
                $p= $em->getRepository(Album::class)->find($request->get("idp"));
                $em->remove($p);
                $em->flush();
                return $this->redirectToRoute("album");
            }
            return $this->redirectToRoute('album');
        }*/
        //----------------------------------

        $photos=$em->getRepository(Album::class)->findBy(array('user' => $u->getId()),array('datePublication' => 'ASC'));

        return $this->render('@Profiling/ProfileSettings.html.twig',array(
            'curr_user'=>$u,'form'=>$form->createView(),'photos'=>$photos
        ));
    }

    public function createAction(Request $request)
    {
        $u=$this->container->get('security.token_storage')->getToken()->getUser();
        $id=$u->getId();
        $post = new Post();
        $post->setUser($this->getUser());
        $form=$this->createForm(PostType::class,$post);
        $form->handleRequest($request);
        if($form->isValid())
        {
            $em=$this->getDoctrine()->getManager();
            $post->setDatePublication(new \DateTime('now '));

            $file = $post->getImage();
            if($file != ""){
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('image_directory',$fileName),
                $fileName
            );
            $post->setImage($fileName);
            $post= $form->getData();
            $em->persist($post);
            $em->flush();

            return $this->redirectToRoute("showPost");}else{
                $em=$this->getDoctrine()->getManager();
                $post->setDatePublication(new \DateTime('now '));
                $post->setImage("");
                $post= $form->getData();
                $em->persist($post);
                $em->flush();
                return $this->redirectToRoute("showPost");
            }
        }
        return $this->render('@Profiling/post.html.twig', array(
            "form"=>$form->createView()
        ));
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => Post::class,
        ));

    }
    public function readAction(Request $request)
    {

        $u=$this->container->get('security.token_storage')->getToken()->getUser();
        $em= $this->getDoctrine()->getManager();


        if($tag = $request->query->get('tag')){
            $recent=$em->getRepository(Post::class)->findByTag($tag)->getResult();
        }
        else
        {
            $recent= $em->getRepository(Post::class)->findBy(array('user' => $u),array('datePublication' => 'DESC'));
            return $this->render("@Profiling/showPost.html.twig",array("recent"=>$recent));
        }

        return $this->render('@Profiling/showPost.html.twig', array(
            "recent"=>$recent,'user'=>$u
        ));
    }
    public function updateAction(Request $request,$idp)
    {
        $em= $this->getDoctrine()->getManager();
        $post=$em->getRepository(Post::class)->find($idp);
        $form=$this->createForm(PostType::class,$post);
        $form->handleRequest($request);
        if($form->isSubmitted())
        {
            $em=$this->getDoctrine()->getManager();
            $file = $post->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('image_directory',$fileName),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $post->setImage($fileName);
            $post->setDatePublication(new \DateTime('now '));
            $post=$form->getData();
            $em->persist($post);
            $em->flush();
            return $this->redirectToRoute("showPost");
        }
        return $this->render('@Profiling/postupdate.html.twig', array(
            "form"=>$form->createView()

        ));


    }
}